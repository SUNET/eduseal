// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: v1-sealer.proto

package v1_sealer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Sealer_Seal_FullMethodName = "/v1.sealer.Sealer/Seal"
)

// SealerClient is the client API for Sealer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sealer seals documents
type SealerClient interface {
	Seal(ctx context.Context, in *SealRequest, opts ...grpc.CallOption) (*SealReply, error)
}

type sealerClient struct {
	cc grpc.ClientConnInterface
}

func NewSealerClient(cc grpc.ClientConnInterface) SealerClient {
	return &sealerClient{cc}
}

func (c *sealerClient) Seal(ctx context.Context, in *SealRequest, opts ...grpc.CallOption) (*SealReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SealReply)
	err := c.cc.Invoke(ctx, Sealer_Seal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SealerServer is the server API for Sealer service.
// All implementations must embed UnimplementedSealerServer
// for forward compatibility
//
// Sealer seals documents
type SealerServer interface {
	Seal(context.Context, *SealRequest) (*SealReply, error)
	mustEmbedUnimplementedSealerServer()
}

// UnimplementedSealerServer must be embedded to have forward compatible implementations.
type UnimplementedSealerServer struct {
}

func (UnimplementedSealerServer) Seal(context.Context, *SealRequest) (*SealReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Seal not implemented")
}
func (UnimplementedSealerServer) mustEmbedUnimplementedSealerServer() {}

// UnsafeSealerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SealerServer will
// result in compilation errors.
type UnsafeSealerServer interface {
	mustEmbedUnimplementedSealerServer()
}

func RegisterSealerServer(s grpc.ServiceRegistrar, srv SealerServer) {
	s.RegisterService(&Sealer_ServiceDesc, srv)
}

func _Sealer_Seal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SealerServer).Seal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sealer_Seal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SealerServer).Seal(ctx, req.(*SealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sealer_ServiceDesc is the grpc.ServiceDesc for Sealer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sealer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.sealer.Sealer",
	HandlerType: (*SealerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Seal",
			Handler:    _Sealer_Seal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1-sealer.proto",
}
